'use client'

import { useState, useEffect } from 'react'
import Image from 'next/image'
import PasswordGate from '@/components/PasswordGate'
import { getAllLiturgists } from '@/admin/liturgists'

interface Service {
  id: string
  date: string
  displayDate: string
  liturgist: any | null
  backup: any | null
  attendance: any[]
  notes?: string
}

// Generate calendar data for the current and next month
const generateCalendarData = (services: Service[], mainServiceDate: string) => {
  // Use current actual date
  const today = new Date()
  const currentMonth = today.getMonth()
  const currentYear = today.getFullYear()
  const todayString = today.toISOString().split('T')[0]
  
  const firstDay = new Date(currentYear, currentMonth, 1)
  const lastDay = new Date(currentYear, currentMonth + 1, 0)
  const daysInMonth = lastDay.getDate()
  const startingDay = firstDay.getDay()
  
  const calendarDays = []
  
  // Add empty cells for days before the first day of the month
  for (let i = 0; i < startingDay; i++) {
    calendarDays.push(null)
  }
  
  // Add days of the month
  for (let day = 1; day <= daysInMonth; day++) {
    const date = new Date(currentYear, currentMonth, day)
    const dateString = date.toISOString().split('T')[0]
    const hasService = services.find((s: Service) => s.date === dateString)
    
    calendarDays.push({
      day,
      date: dateString,
      isToday: dateString === todayString,
      isMainService: dateString === mainServiceDate,
      isSunday: date.getDay() === 0,
      hasService: !!hasService,
      serviceData: hasService
    })
  }
  
  return {
    monthName: firstDay.toLocaleDateString('en-US', { month: 'long', year: 'numeric' }),
    days: calendarDays
  }
}

export default function Home() {
  const [hoveredService, setHoveredService] = useState<string | null>(null)
  const [expandedService, setExpandedService] = useState<string | null>(null)
  const [selectedSignup, setSelectedSignup] = useState<{serviceId: string} | null>(null)
  const [signupForm, setSignupForm] = useState({
    selectedPerson: '',
    firstName: '',
    lastName: '',
    email: '',
    phone: '',
    role: 'liturgist' as 'liturgist' | 'backup'
  })
  const [isClient, setIsClient] = useState(false)
  const [services, setServices] = useState<Service[]>([])
  const [loading, setLoading] = useState(true)
  const [calendarOpen, setCalendarOpen] = useState(true)
  
  const liturgists = getAllLiturgists()

  useEffect(() => {
    setIsClient(true)
    fetchServices()
    
    // Auto-refresh every 15 minutes
    const intervalId = setInterval(() => {
      fetchServices()
    }, 15 * 60 * 1000) // 15 minutes in milliseconds
    
    // Cleanup interval on unmount
    return () => clearInterval(intervalId)
  }, [])

  const fetchServices = async () => {
    try {
      const response = await fetch('/api/services')
      const data = await response.json()
      if (data.success) {
        setServices(data.services)
      }
    } catch (error) {
      console.error('Error fetching services:', error)
    } finally {
      setLoading(false)
    }
  }

  // Add scroll behavior to highlight service when scrolling
  const scrollToService = (serviceId: string) => {
    // Only run on client side
    if (isClient && typeof window !== 'undefined') {
      const element = document.getElementById(`service-${serviceId}`)
      if (element) {
        element.scrollIntoView({ behavior: 'smooth', block: 'center' })
        setHoveredService(serviceId)
        setTimeout(() => setHoveredService(null), 2000)
      }
    }
  }

  const today = new Date().toISOString().split('T')[0]
  
  // Determine the "main" service based on Pacific Time
  // If before 6am Monday PT, highlight last Sunday. Otherwise, highlight next Sunday.
  const getMainServiceDate = () => {
    const now = new Date()
    // Convert to Pacific Time
    const pacificTime = new Date(now.toLocaleString('en-US', { timeZone: 'America/Los_Angeles' }))
    const dayOfWeek = pacificTime.getDay()
    const hour = pacificTime.getHours()
    
    // If it's Monday (1) and before 6am, use yesterday (Sunday)
    if (dayOfWeek === 1 && hour < 6) {
      const yesterday = new Date(pacificTime)
      yesterday.setDate(yesterday.getDate() - 1)
      return yesterday.toISOString().split('T')[0]
    }
    
    // Otherwise find the next Sunday
    let nextSunday = new Date(pacificTime)
    while (nextSunday.getDay() !== 0) {
      nextSunday.setDate(nextSunday.getDate() + 1)
    }
    return nextSunday.toISOString().split('T')[0]
  }
  
  const mainServiceDate = getMainServiceDate()
  const calendarData = generateCalendarData(services, mainServiceDate)

  const handleSignup = (serviceId: string) => {
    setSelectedSignup({ serviceId })
  }
  
  // Handle person selection from dropdown
  const handlePersonSelect = (personName: string) => {
    setSignupForm(prev => ({ ...prev, selectedPerson: personName }))
    
    if (personName !== 'other') {
      const liturgist = liturgists.find(l => l.name === personName)
      if (liturgist) {
        setSignupForm(prev => ({
          ...prev,
          email: liturgist.email,
          phone: '', // We don't have phone in the liturgist data
          firstName: '',
          lastName: ''
        }))
      }
    } else {
      // Clear fields for "other"
      setSignupForm(prev => ({
        ...prev,
        firstName: '',
        lastName: '',
        email: '',
        phone: ''
      }))
    }
  }

  const handleSubmitSignup = async (e: React.FormEvent) => {
    e.preventDefault()
    
    if (!selectedSignup) return

    const service = services.find((s: Service) => s.id === selectedSignup.serviceId)
    if (!service) return

    // Submit to Airtable via API
    try {
      const response = await fetch('/api/signup', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          serviceDate: service.date,
          displayDate: service.displayDate,
          name: signupForm.name,
          email: signupForm.email,
          phone: signupForm.phone,
          role: selectedSignup.type === 'liturgist' ? 'Liturgist' : 
                selectedSignup.type === 'backup' ? 'Backup' : 'Attendance',
          attendanceStatus: selectedSignup.type === 'attendance' ? 
            (signupForm.attendanceStatus === 'yes' ? 'Yes' : 
             signupForm.attendanceStatus === 'no' ? 'No' : 'Maybe') : undefined,
        }),
      })

      const data = await response.json()

      if (data.success) {
        alert('Thank you for signing up! Your information has been recorded.')
        // Refresh services data
        fetchServices()
      } else {
        console.error('Signup failed:', data)
        alert(`There was an error submitting your signup: ${data.error}\n\n${data.details || 'Please try again or contact the church office.'}`)
      }
    } catch (error) {
      console.error('Signup error:', error)
      alert(`There was an error submitting your signup: ${error}\n\nPlease try again or contact the church office.`)
    }

    setSelectedSignup(null)
    setSignupForm({ name: '', email: '', phone: '', attendanceStatus: 'yes' })
  }

  const selectedService = selectedSignup ? services.find((s: Service) => s.id === selectedSignup.serviceId) : null

  if (loading) {
    return (
      <main className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600">Loading services...</p>
        </div>
      </main>
    )
  }

  return (
    <main className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100">
      {/* Pinned Calendar - Collapsible */}
      {calendarOpen ? (
        <div className="fixed top-4 left-4 z-50 bg-white shadow-xl rounded-lg border-2 border-gray-200 w-80">
          <div className="p-4">
            <div className="flex items-center justify-between mb-3">
              <div className="flex items-center space-x-2">
                <Image
                  src="/logo-for-church-larger.jpg"
                  alt="Ukiah United Methodist Church Logo"
                  width={32}
                  height={32}
                  className="rounded-full shadow-sm"
                />
                <div>
                  <h1 className="text-sm font-bold text-gray-800">Liturgist Schedule</h1>
                  <p className="text-xs text-blue-600">{calendarData.monthName}</p>
                </div>
              </div>
              <button
                onClick={() => setCalendarOpen(false)}
                className="text-gray-400 hover:text-gray-600 transition-colors p-1"
                title="Close calendar"
              >
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>
            
            <div className="grid grid-cols-7 gap-1 text-xs">
              {['S', 'M', 'T', 'W', 'T', 'F', 'S'].map(day => (
                <div key={day} className="text-center font-medium text-gray-600 py-1">
                  {day}
                </div>
              ))}
              {calendarData.days.map((day, index) => (
                <div
                  key={index}
                  className={`text-center py-2 rounded text-xs transition-colors ${
                    !day ? '' :
                    day.isMainService ? 'bg-purple-600 text-white font-bold cursor-pointer hover:bg-purple-700' :
                    day.isToday ? 'bg-blue-600 text-white font-bold' :
                    day.isSunday && day.hasService ? (
                      hoveredService === day.serviceData?.id ? 'bg-yellow-300 font-bold border border-yellow-500' : 'bg-green-100 font-medium cursor-pointer hover:bg-green-200'
                    ) :
                    day.isSunday ? 'bg-orange-100 font-medium' :
                    'text-gray-600'
                  }`}
                  title={
                    day?.isMainService ? `Current Service: ${day.serviceData?.displayDate}` :
                    day?.isSunday && day?.hasService ? `Service on ${day.serviceData?.displayDate}` : ''
                  }
                  onClick={day?.hasService && isClient ? () => scrollToService(day.serviceData!.id) : undefined}
                >
                  {day?.day || ''}
                </div>
              ))}
            </div>
          </div>
        </div>
      ) : (
        <button
          onClick={() => setCalendarOpen(true)}
          className="fixed top-4 left-4 z-50 bg-blue-600 text-white rounded-full p-3 shadow-lg hover:bg-blue-700 transition-colors"
          title="Open calendar"
        >
          <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
          </svg>
        </button>
      )}

      <div className="container mx-auto px-4 py-8 max-w-4xl">
        {/* Signup Modal */}
        {selectedSignup && (
          <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
            <div className="bg-white rounded-lg shadow-xl p-6 max-w-md w-full">
              <h3 className="text-xl font-semibold text-gray-800 mb-4">
                Sign up for {selectedService?.displayDate}
              </h3>
              <p className="text-sm text-gray-600 mb-4">
                {selectedSignup.type === 'liturgist' && 'Sign up to be the main liturgist'}
                {selectedSignup.type === 'backup' && 'Sign up to be the backup liturgist'}
                {selectedSignup.type === 'attendance' && 'Let us know if you plan to be in church'}
              </p>
              
              <form onSubmit={handleSubmitSignup} className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Name *
                  </label>
                  <input
                    type="text"
                    required
                    value={signupForm.name}
                    onChange={(e) => setSignupForm({ ...signupForm, name: e.target.value })}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Email *
                  </label>
                  <input
                    type="email"
                    required
                    value={signupForm.email}
                    onChange={(e) => setSignupForm({ ...signupForm, email: e.target.value })}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Phone (optional)
                  </label>
                  <input
                    type="tel"
                    value={signupForm.phone}
                    onChange={(e) => setSignupForm({ ...signupForm, phone: e.target.value })}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                {selectedSignup.type === 'attendance' && (
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Will you be in church this Sunday?
                    </label>
                    <select
                      value={signupForm.attendanceStatus}
                      onChange={(e) => setSignupForm({ ...signupForm, attendanceStatus: e.target.value })}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                    >
                      <option value="yes">Yes</option>
                      <option value="no">No</option>
                      <option value="maybe">I don't know</option>
                    </select>
                  </div>
                )}

                <div className="flex gap-3 mt-6">
                  <button
                    type="submit"
                    className="flex-1 bg-blue-600 text-white py-2 rounded-lg hover:bg-blue-700 transition-colors"
                  >
                    Submit
                  </button>
                  <button
                    type="button"
                    onClick={() => setSelectedSignup(null)}
                    className="flex-1 bg-gray-300 text-gray-700 py-2 rounded-lg hover:bg-gray-400 transition-colors"
                  >
                    Cancel
                  </button>
                </div>
              </form>
            </div>
          </div>
        )}

        {/* Upcoming Services */}
        <div className="bg-white rounded-lg shadow-lg p-6">
          <div className="flex justify-between items-center mb-6">
            <h2 className="text-2xl font-semibold text-gray-800 flex items-center">
              <svg className="w-6 h-6 mr-2 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 002 2z" />
              </svg>
              Liturgist Services
            </h2>
            <a 
              href="/archive"
              className="text-blue-600 hover:text-blue-700 font-medium text-sm flex items-center"
            >
              View Archive
              <svg className="w-4 h-4 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
              </svg>
            </a>
          </div>
          <div className="space-y-3">
            {services.map((service: Service) => {
              const isExpanded = expandedService === service.id
              const isMainService = service.date === mainServiceDate
              
              return (
                <div 
                  key={service.id}
                  id={`service-${service.id}`}
                  className={`border rounded-lg transition-all duration-300 ${
                    isMainService
                      ? 'border-purple-500 bg-purple-50 shadow-md'
                      : hoveredService === service.id 
                        ? 'border-yellow-400 bg-yellow-50' 
                        : 'border-gray-200 bg-white hover:border-gray-300'
                  }`}
                  onMouseEnter={() => setHoveredService(service.id)}
                  onMouseLeave={() => setHoveredService(null)}
                >
                  {/* Compact Bar View */}
                  <div 
                    className="p-4 cursor-pointer flex items-center justify-between"
                    onClick={() => setExpandedService(isExpanded ? null : service.id)}
                  >
                    <div className="flex items-center space-x-4 flex-1">
                      {/* Date */}
                      <div className="min-w-[140px]">
                        <p className="font-semibold text-gray-800 text-sm">
                          {service.displayDate.replace(', 2025', '')}
                        </p>
                        {isMainService && (
                          <span className="text-xs font-bold text-purple-600">CURRENT</span>
                        )}
                      </div>
                      
                      {/* Status Indicators */}
                      <div className="flex items-center space-x-6 flex-1">
                        {/* Liturgist Status */}
                        <div className="flex items-center space-x-2">
                          <span className="text-xs text-gray-600 font-medium">Liturgist:</span>
                          {service.liturgist ? (
                            <div className="flex items-center text-green-600">
                              <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                                <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                              </svg>
                              <span className="text-xs ml-1 font-medium">{service.liturgist.name}</span>
                            </div>
                          ) : (
                            <div className="flex items-center text-red-500">
                              <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                                <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
                              </svg>
                              <span className="text-xs ml-1 font-medium">Empty</span>
                            </div>
                          )}
                        </div>
                        
                        {/* Backup Status */}
                        <div className="flex items-center space-x-2">
                          <span className="text-xs text-gray-600 font-medium">Backup:</span>
                          {service.backup ? (
                            <div className="flex items-center text-green-600">
                              <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                                <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                              </svg>
                              <span className="text-xs ml-1 font-medium">{service.backup.name}</span>
                            </div>
                          ) : (
                            <div className="flex items-center text-gray-400">
                              <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                                <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
                              </svg>
                              <span className="text-xs ml-1">None</span>
                            </div>
                          )}
                        </div>
                        
                        {/* Attendance Count */}
                        <div className="flex items-center space-x-2">
                          <span className="text-xs text-gray-600 font-medium">Attending:</span>
                          <span className="text-xs font-semibold text-blue-600">
                            {service.attendance.filter(p => p.status === 'yes').length} people
                          </span>
                        </div>
                      </div>
                    </div>
                    
                    {/* Expand Icon */}
                    <svg 
                      className={`w-5 h-5 text-gray-400 transition-transform ${isExpanded ? 'rotate-180' : ''}`} 
                      fill="none" 
                      stroke="currentColor" 
                      viewBox="0 0 24 24"
                    >
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                    </svg>
                  </div>

                  {/* Expanded Details */}
                  {isExpanded && (
                    <div className="px-4 pb-4 space-y-3 border-t border-gray-200 pt-3">
                      {/* Liturgist Section */}
                      <div className="p-3 bg-blue-50 rounded-lg">
                        <h4 className="font-medium text-gray-800 mb-2 text-sm">Main Liturgist</h4>
                        {service.liturgist ? (
                          <div className="flex justify-between items-center">
                            <div>
                              <p className="font-medium text-blue-700 text-sm">{service.liturgist.name}</p>
                              <p className="text-xs text-blue-600">{service.liturgist.email}</p>
                            </div>
                          </div>
                        ) : (
                          <button
                            onClick={(e) => {
                              e.stopPropagation()
                              handleSignup(service.id, 'liturgist')
                            }}
                            className="w-full bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700 transition-colors text-sm"
                          >
                            Sign Up to be Main Liturgist
                          </button>
                        )}
                      </div>

                      {/* Backup Section */}
                      <div className="p-3 bg-orange-50 rounded-lg">
                        <h4 className="font-medium text-gray-800 mb-2 text-sm">Backup Liturgist</h4>
                        {service.backup ? (
                          <div className="flex justify-between items-center">
                            <div>
                              <p className="font-medium text-orange-700 text-sm">{service.backup.name}</p>
                              <p className="text-xs text-orange-600">{service.backup.email}</p>
                            </div>
                          </div>
                        ) : (
                          <button
                            onClick={(e) => {
                              e.stopPropagation()
                              handleSignup(service.id, 'backup')
                            }}
                            className="w-full bg-orange-600 text-white py-2 px-4 rounded-lg hover:bg-orange-700 transition-colors text-sm"
                          >
                            Sign Up to be Backup Liturgist
                          </button>
                        )}
                      </div>

                      {/* Attendance Section */}
                      <div className="p-3 bg-green-50 rounded-lg">
                        <div className="flex justify-between items-center mb-2">
                          <h4 className="font-medium text-gray-800 text-sm">Church Attendance</h4>
                          <button
                            onClick={(e) => {
                              e.stopPropagation()
                              handleSignup(service.id, 'attendance')
                            }}
                            className="bg-green-600 text-white py-1 px-3 rounded-lg hover:bg-green-700 transition-colors text-xs"
                          >
                            Update Status
                          </button>
                        </div>
                        {service.attendance.length > 0 ? (
                          <div className="text-xs space-y-1">
                            {service.attendance.map((person: any, index: number) => (
                              <div key={index} className="flex justify-between">
                                <span className="text-green-700">{person.name}</span>
                                <span className={`capitalize ${
                                  person.status === 'yes' ? 'text-green-600' :
                                  person.status === 'no' ? 'text-red-600' :
                                  'text-yellow-600'
                                }`}>
                                  {person.status === 'maybe' ? 'unsure' : person.status}
                                </span>
                              </div>
                            ))}
                          </div>
                        ) : (
                          <p className="text-xs text-gray-600">No attendance responses yet</p>
                        )}
                      </div>
                    </div>
                  )}
                </div>
              )
            })}
          </div>
        </div>

        {/* Information Section */}
        <div className="mt-8 bg-white rounded-lg shadow-lg p-6">
          <h3 className="text-xl font-semibold text-gray-800 mb-4">What Does a Liturgist Do?</h3>
          <div className="prose prose-blue max-w-none text-sm">
            <p className="text-gray-600 mb-4">
              As a liturgist, you'll help lead our congregation in worship by:
            </p>
            <ul className="text-gray-600 space-y-1 mb-4 text-sm">
              <li>• Reading the Call to Worship</li>
              <li>• Leading the Responsive Reading</li>
              <li>• Reading the Scripture lesson(s)</li>
              <li>• Assisting with other liturgical elements as needed</li>
            </ul>
            <p className="text-gray-600 text-sm">
              The bulletin and readings will be provided to you in advance. 
              If you have any questions, please contact the church office.
            </p>
          </div>
        </div>

        {/* Footer */}
        <footer className="text-center text-gray-600 mt-8 text-sm">
          <p className="mb-1">
            <strong>Ukiah United Methodist Church</strong>
          </p>
          <p className="mb-1">
            270 N. Pine St., Ukiah, CA 95482 | 707.462.3360
          </p>
          <p className="text-xs">
            <a 
              href="https://ukiahumc.org" 
              className="text-blue-600 hover:underline"
              target="_blank"
              rel="noopener noreferrer"
            >
              ukiahumc.org
            </a>
          </p>
        </footer>
      </div>
    </main>
  )
}